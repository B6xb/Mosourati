// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post Post[]
  sessions Session[]
  accounts Account[]
  comments Comment[]
  likes Like[]
}

model Account{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.String
    access_token String? @db.String
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.String
    session_state String?

    user User @relation(fields: [userId], references:[id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      sessionToken String @unique
      userId String @db.ObjectId
      expires DateTime

      user User @relation(fields: [userId], references:[id], onDelete: Cascade)

}

model VerficationToken {
        id String @id @default(auto()) @map("_id") @db.ObjectId
        identifier String 
        token String @unique
        expires DateTime

        @@unique([identifier, token])
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  file String
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)
  userId String @db.ObjectId
  likes       Like[]    
  comments    Comment[] 
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)
  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade )
}
model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text   String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}
